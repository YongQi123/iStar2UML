UseCaseModel CoCoME {

	UC::openCashDask
	UC::processSale definedBySSD(ProcessSale) relatedService(ProcessSale)
	UC::closeCashDask
	UC::purchaseGoods
	UC::orderProducts
	UC::receiveOrderedProduct
	UC::showStockReports
	UC::changePrice
	UC::listSuppliers
	UC::openStore
	UC::closeStore
	UC::manageStore
	UC::manageProductCatalog
	UC::manageCashDesk
	UC::manageCashier
	UC::manageItem
	UC::manageSupplier

	Actor Cashier {
		openCashDask
		processSale
		closeCashDask
	}

	Actor Test {
		purchaseGoods
	}

	Actor StoreManager {
		orderProducts
		receiveOrderedProduct
		showStockReports
		changePrice
		listSuppliers
		openStore
		closeStore
	}

	Actor Administrator {
		manageStore
		manageProductCatalog
		manageCashDesk
		manageCashier
		manageItem
		manageSupplier
	}

	Interaction ProcessSale {

		[Participants: Cashier ProcessSale]

		CallMessage::makeNewSale(makeNewSale makeNewSaleSender -> makeNewSaleStart)
		ReturnMessage::makeNewSaleReturn(makeNewSaleFinish -> makeNewSaleReturnReceiver makeNewSale)
		CallMessage::enderItem(enderItem enderItemReturnReceiver -> enderItemStart)
		ReturnMessage::enderItemReturn(enderItemFinish -> enderItemReturnReceiver enderItem)
		CallMessage::endSale(endSale endSaleSender -> endSaleStart)
		ReturnMessage::endSaleReturn(endSaleFinish -> endSaleReturnReceiver endSale)
		CallMessage::makeCashPayment(makeCashPayment makeCashPaymentSender -> makeCashPaymentStart)
		ReturnMessage::makeCashPaymentReturn(makeCashPaymentFinish -> makeCashPaymentReturnReceiver makeCashPayment)
		CallMessage::makeCardPayment(makeCardPayment makeCardPaymentSender -> makeCardPaymentStart)
		ReturnMessage::makeCardPaymentReturn(makeCardPaymentFinish -> makeCardPaymentReturnReceiver makeCardPayment)

		Execution::makeNewSale(ProcessSale makeNewSaleStart makeNewSaleFinish)
		Execution::enderItem(ProcessSale enderItemStart enderItemFinish)
		Execution::endSale(ProcessSale endSaleStart endSaleFinish)
		Execution::makeCashPayment(ProcessSale makeCashPaymentStart makeCashPaymentFinish)
		Execution::makeCardPayment(ProcessSale makeCardPaymentStart makeCardPaymentFinish)

		CombinedFragment:: enterItemLoop -> loop {

			[Participants: Cashier ProcessSale]

			enterItemLoopStart -> enterItemLoopFinish

			Operand::hasMoreItems(enterItemLoop enterItemLoopFinish)
		}

		CombinedFragment:: paymentMethodAlt -> alt {

			[Participants: Cashier ProcessSale]

			PaymentMethodAltStart -> PaymentMethodAltFinish

			Operand::cash(CashStart PaymentMethodAltFinish)
			Operand::card(CardStart PaymentMethodAltFinish)
		}

		MessageEnd::makeNewSaleSender(Cashier makeNewSale)
		ExecutionEnd::makeNewSaleStart(ProcessSale makeNewSale)
		ExecutionEnd::makeNewSaleFinish(ProcessSale makeNewSale)
		MessageEnd::makeNewSaleReturnReceiver(Cashier makeNewSaleReturn)
		CombinedFragmentEnd::enterItemLoopStart(enterItemLoop)
		OperandEnd::enterItemLoop(hasMoreItems)
		MessageEnd::enderItemSender(Cashier enderItem)
		ExecutionEnd::enderItemStart(ProcessSale enderItem)
		ExecutionEnd::enderItemFinish(ProcessSale enderItem)
		MessageEnd::enderItemReturnReceiver(Cashier enderItemReturn)
		CombinedFragmentEnd::enterItemLoopFinish(enterItemLoop)
		MessageEnd::endSaleSender(Cashier endSale)
		ExecutionEnd::endSaleStart(ProcessSale endSale)
		ExecutionEnd::endSaleFinish(ProcessSale endSale)
		MessageEnd::endSaleReturnReceiver(Cashier endSaleReturn)
		CombinedFragmentEnd::PaymentMethodAltStart(paymentMethodAlt)
		OperandEnd::CashStart(cash)
		MessageEnd::makeCashPaymentSender(Cashier makeCashPayment)
		ExecutionEnd::makeCashPaymentStart(ProcessSale makeCashPayment)
		ExecutionEnd::makeCashPaymentFinish(ProcessSale makeCashPayment)
		MessageEnd::makeCashPaymentReturnReceiver(Cashier makeCashPaymentReturn)
		OperandEnd::CardStart(card)
		MessageEnd::makeCardPaymentSender(Cashier makeCardPayment)
		ExecutionEnd::makeCardPaymentStart(ProcessSale makeCardPayment)
		ExecutionEnd::makeCardPaymentFinish(ProcessSale makeCardPayment)
		MessageEnd::makeCardPaymentReturnReceiver(Cashier makeCardPaymentReturn)
		CombinedFragmentEnd::PaymentMethodAltFinish(paymentMethodAlt)

	}

	Service ProcessSale {

		[Operation]
		makeNewSale()
		enderItem(barcode, quantity)
		endSale()
		makeCashPayment(amount)
		makeCardPayment(cardAccountNumber, expiryDate, fee)

	}

	Service CoCoMESystem {

	}

	Service ThirdPartyServices {

	}

}

DomainModel CoCoME {

	Entity Cashier {
	}

	Entity Customers {
	}

	Entity Administrator {
	}

	Entity StoreManager {
	}

	Entity CashPayment {
		[Refer]
		Using : Cashier Association
	}

	Entity CardPayment {
		[Refer]
		Using : Cashier Association
	}

	Entity CashDesk {
		[Refer]
		Using : Cashier Association
	}

	@AutoCRUD Entity Item {
		Barcode : Integer

		[Refer]
		Using : Administrator Association
	}

	Entity ProductCataiog {
		[Refer]
		Using : Administrator Association
	}

	Entity Store {
		[Refer]
		Using : StoreManager Association
	}

	Entity OrderProduct {
		[Refer]
		Using : OrderProduct Association
	}

}

